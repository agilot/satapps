{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SAT-Apps","text":"<p>SAT-Apps is a Scala library that tackles several NP-hard problems using Z3, an optimized SMT solver from Microsoft Research.</p> <p>It also implements algorithmic data structures such as matrices, multisets, graphs and propositional logic.</p>"},{"location":"problems/","title":"List of problems","text":""},{"location":"problems/#graphs","title":"Graphs","text":""},{"location":"problems/#clique","title":"Clique","text":"<ul> <li>Clique</li> <li>Maximum clique and clique number</li> <li>Clique cover </li> <li>Minimum clique cover and clique cover number</li> </ul>"},{"location":"problems/#coloring","title":"Coloring","text":"<ul> <li>k-coloring</li> <li>Minimum graph coloring and chromatic number</li> <li>Chromatic polyonomial</li> <li>Edge coloring problem and chromatic index</li> </ul>"},{"location":"problems/#dominating-set","title":"Dominating set","text":"<ul> <li>Dominating set</li> <li>Minimum dominating set and domination number</li> <li>Independent dominating set</li> <li>Minimum independent dominating set and independent domination number</li> <li>Total dominating set</li> <li>Minimum total dominating set and total domination number</li> <li>Connected dominating</li> <li>Minimum connected dominating set and connected domination number</li> <li>Domatic partition search and decision problem</li> <li>Domatic partition problem and domatic number</li> </ul>"},{"location":"problems/#hamiltonian-graphs","title":"Hamiltonian graphs","text":"<ul> <li>Directed and undirected Hamiltonian cycle</li> <li>Directed and undirected Hamiltonian path</li> <li>Directed and undirected </li> <li>Hamiltonian path with fixed start and end points</li> <li>Asymetric and symetric integer traveling salesperson decision problem</li> </ul>"},{"location":"problems/#independent-set","title":"Independent set","text":"<ul> <li>Independent set</li> <li>Maximum independent set and independence number</li> <li>Independent dominating set</li> <li>Minimum independent dominating set and independent domination number</li> </ul>"},{"location":"problems/#vertex-cover","title":"Vertex cover","text":"<ul> <li>Vertex cover</li> <li>Minimum vertex cover and vertex cover number</li> </ul>"},{"location":"problems/#games","title":"Games","text":""},{"location":"problems/#n-queens","title":"N-Queens","text":"<ul> <li>N-queens completion</li> <li>Blocked n-queens</li> </ul>"},{"location":"problems/#grid-games","title":"Grid games","text":"<ul> <li>Latin square completion</li> <li>Sudoku completion</li> </ul>"},{"location":"problems/#sets","title":"Sets","text":""},{"location":"problems/#partitioning","title":"Partitioning","text":"<ul> <li>Partition</li> <li>k-partition</li> <li>Subset sum</li> <li>k-way number partitioning</li> <li>Bin packing</li> <li>Minimum Bin Packing</li> </ul>"},{"location":"problems/#set-covering-and-packing","title":"Set covering and packing","text":"<ul> <li>Set cover</li> <li>Minimum set cover</li> <li>Set packing</li> <li>Maximum set packing</li> <li>Exact cover</li> <li>Hitting set</li> <li>Minimum hitting set</li> <li>Exact hitting set</li> <li>Set splitting</li> </ul>"},{"location":"problems/#knapsack","title":"Knapsack","text":"<ul> <li>Knapsack</li> <li>Bounded knapsack</li> <li>Unbounded knapsack</li> </ul>"},{"location":"problems/#language-strings","title":"Language (Strings)","text":"<ul> <li>Close string</li> </ul>"},{"location":"problems/clique/","title":"Clique","text":"<p>A subset of vertices \\(S\\) in a graph \\(G = (V, E)\\) is a clique if every distinct pair of vertices of \\(S\\) is connected.</p> <p>A maximum clique is an clique of largest possible size. This size is called the clique number of \\(G\\) and is usually denoted by \\(\\omega(G)\\).</p> <p>A clique clover or partition into cliques is a partition of the vertices of the graph into cliques.</p> <p>A minimum clique cover is a clique cover with the smallest possible number of cliques. This number is called the clique cover number of the graph.</p>"},{"location":"problems/clique/#clique-search-and-decision-problem","title":"Clique search and decision problem","text":"<p>The clique decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has a clique of size \\(k\\). This problem has been proven to be NP-complete (Karp, 1972) [1]. The clique search problem consists in finding such a clique.</p> <p>Finding a clique of size \\(k\\) is equivalent to finding an independent set of size \\(k\\) in the graph's complement. </p>"},{"location":"problems/clique/#maximum-clique-problem-and-clique-number","title":"Maximum clique problem and clique number","text":"<p>The maximum clique problem consists in finding a maximum clique in the graph; it is  NP-hard.</p> <p>Finding a maximum clique is equivalent to finding a maximum independent set in the graph's complement.</p> <p>Computing the clique number of a graph is also NP-hard. It is equal to the independence number of the graph's complement.</p>"},{"location":"problems/clique/#clique-cover-search-and-decision-problem","title":"Clique cover search and decision problem","text":"<p>The clique cover decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has a clique cover of size \\(k\\). This problem has been proven to be NP-complete (Karp, 1972) [1].The clique cover search problem consists in finding such a clique.</p> <p>Finding a clique cover of size \\(k\\) is equivalent to finding a k-coloring in the graph's complement. </p>"},{"location":"problems/clique/#minimum-clique-cover-problem-and-clique-cover-number","title":"Minimum clique cover problem and clique cover number","text":"<p>The minimum clique cover problem consists in finding a minimum clique cover in the graph; it is  NP-hard.</p> <p>Finding a mininum clique cover is equivalent to finding a minimum coloring in the graph's complement.</p> <p>Computing the clique cover number of a graph is also NP-hard. It is equal to the chromatic number of the graph's complement.</p> <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p>"},{"location":"problems/coloring/","title":"Coloring","text":"<p>Given a graph \\(G = (V, E)\\), a vertex coloring is an assignment such that no two adjacent vertices are of the same color. This is equivalent to partionning \\(V\\) into independent sets.</p> <p>A vertex coloring that minimizes the number of colors needed for a given graph G is known as a minimum vertex coloring of G. The minimum number of colors itself is called the chromatic number, denoted \\(\\chi(G)\\).</p> <p>The chromatic polynomial of a graph is the polynomial that associates to each value \\(k\\) the number of possible k-colorings in the graph. It is often denoted \\(P(G, k)\\) or \\(\\chi_G(k)\\).</p> <p>An edge coloring is an assignment such that no two adjacent edges are of the same color. This is equivalent to partionning \\(V\\) into disjoint matchings.</p> <p>An edge coloring that minimizes the number of colors needed for a given graph G is known as a minimum edge coloring of G. The minimum number of colors itself is called the chromatic index, denoted \\(\\chi'(G)\\).</p>"},{"location":"problems/coloring/#k-coloring-problem","title":"k-coloring problem","text":"<p>The k-coloring problem consists in deciding whether a graph, given a natural integer \\(k\\), admits a k-coloring. This problem has been proven to be NP-complete (Karp, 1972) [1]. The search version of the problem consists in finding such an assignement. The enumeration version of the problem consists in determining the value of the chromatic polynomial of the graph in \\(k\\).</p> <p>Finding a k-coloring is equivalent to find a feasible solution to this 0-1 integer linear program:</p> <p>Each vertex has a unique color:</p> \\[\\sum_{i = 1}^k x_{v, i} = 1 \\  \\forall v \\in V\\] <p>No adjacent vertices have the same color:</p> \\[x_{u, i} + x_{v, i} \\leq 1 \\ \\forall (u, v) \\in E, \\, i = 1, ..., k\\] <p>Finding an k-coloring is equivalent to finding a clique cover of size \\(k\\) in the graph's complement.</p>"},{"location":"problems/coloring/#minimum-coloring-problem-and-chromatic-number","title":"Minimum coloring problem and chromatic number","text":"<p>The minimum problem consists in finding a minimim coloring in the graph; it is  NP-hard.</p> <p>Finding a maximum independent set is equivalent to find an optimal solution to the following 0-1 integer linear program (where \\(w_i\\) represents whether the color is used):</p> \\[\\min_{x, w} \\sum_{i = 1}^{|V|}w_i\\] \\[\\text{s.t. } \\sum_{i = 1}^{|V|} x_{v, i} = 1 \\  \\forall v \\in V\\] \\[x_{u, i} + x_{v, i} \\leq w_i \\ \\forall (u, v) \\in E, \\, i = 1, ..., |V|\\] <p>Finding a minimum coloring is equivalent to finding a maximum clique cover in the graph's complement.</p> <p>Computing the chromatic number of a graph is also NP-hard. It is equal to the clique cover number of the graph's complement.</p>"},{"location":"problems/coloring/#chromatic-polynomial","title":"Chromatic polynomial","text":"<p>Computing the value of the chromatic polynomial at any integer greater than 2 is #P-complete and is #P-hard at any rational number [2]. Finding the coefficients of the chromatic polynomial is also #P-hard[3].</p>"},{"location":"problems/coloring/#edge-coloring-problem-and-chromatic-index","title":"Edge coloring problem and chromatic index","text":"<p>The edge coloring problem consists in finding a minimum edge coloring in the graph.</p> <p>By Vizing's theorem (Vizing, 1964) [4], the chromatic index is almost tightly bounded by the maximum degree \\(\\Delta(G)\\) of the graph :</p> \\[\\Delta(G) \\leq \\chi'(G) \\leq \\Delta(G) + 1\\] <p>Therefore deciding whether the graph is k-edge colorable is as hard as finding a minimum coloring and computing the chromatic index. In fact the 3 problems are NP-complete [5].</p> <p>Finding a minimum edge coloring is equivalent to find a feasible solution to the following 0-1 integer linear program:</p> <p>Each edge has a unique color:</p> \\[\\sum_{i = 1}^{\\Delta(G)} x_{e, i} = 1 \\  \\forall e \\in E\\] <p>No adjacent edges have the same color:</p> \\[\\sum_{e \\in \\delta(u)} x_{e, i} \\leq 1 \\ \\forall u \\in V, \\, i = 1, ..., \\Delta(G)\\] <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p> <p>[2] M. Linial. Hard enumeration problems in geometry and combinatorics. SIAM Journal of Algebraic and Discrete Methods, 7:331\u2013335, 1986.</p> <p>[3] Oxley, J. G.; Welsh, D. J. A. (2002), \"Chromatic, flow and reliability polynomials: The complexity of their coefficients.\", Combinatorics, Probability and Computing, 11 (4): 403\u2013426</p> <p>[4] Vizing, V.G. The chromatic class of a multigraph. Cybern Syst Anal 1, 32\u201341 (1965)</p> <p>[5] Holyer, Ian (1981), \"The NP-completeness of edge-coloring\", SIAM Journal on Computing, 10 (4): 718\u2013720,</p>"},{"location":"problems/domset/","title":"Dominating set","text":"<p>A subset of vertices \\(S\\) in a graph \\(G = (V, E)\\) is an dominating set if any vertex that is not in \\(S\\) is adjacent to a vertex of \\(S\\). A minimum dominating set is a dominating set of smallest possible size. This size is called the domination number of \\(G\\) and is usually denoted by \\(\\gamma(G)\\).</p> <p>An indepedent dominating set is a subset of vertices that is both a dominating set and an independent set. A minimum independent dominating set is an independent dominating set of smallest possible size. This size is called the independent domination number of \\(G\\) and is usually denoted by \\(i(G)\\).</p> <p>A total dominating set is a set such that every vertex in \\(V\\) is adjacent to a vertex in \\(S\\) . A minimum total dominating set is a total dominating set of smallest possible size. This size is called the total domination number of \\(G\\) and is usually denoted by \\(\\gamma_t(G)\\). In order for the total domination number to be defined, the graph has to be connected.</p> <p>A connected dominating set is a dominating set that induces a connected subgraph. A minimum connected dominating set is a connected dominating set of smallest possible size. This size is called the connected domination number of \\(G\\) and is usually denoted by \\(\\gamma_c(G)\\). In order for the connected domination number to be defined, the graph has to be connected.</p> <p>A partition of \\(V\\) into dominating sets is called a domatic partition. A maximum domatic partition is a domatic partition of maximum size. This size is called the domatic number of the graph.</p>"},{"location":"problems/domset/#dominating-set-search-and-decision-problem","title":"Dominating set search and decision problem","text":"<p>The dominating set decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has a dominating set of size \\(k\\). This problem has been proven to be NP-complete [1]. The dominating set search problem consists in finding such a dominating set.</p> <p>Finding a dominating set of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[\\sum_{v \\in N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\]"},{"location":"problems/domset/#minimum-dominating-set-problem-and-domination-number","title":"Minimum dominating set problem and domination number","text":"<p>The minimum dominating set problem consists in finding a minimum dominating set in the graph; it is  NP-hard.</p> <p>Finding a minimum dominating set is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\min_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t.} \\sum_{v \\in N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\] <p>Computing the domination number of a graph is also NP-hard.</p>"},{"location":"problems/domset/#independent-dominating-set-search-and-decision-problem","title":"Independent dominating set search and decision problem","text":"<p>The independent dominating set decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has an independent dominating set of size \\(k\\). This problem has been proven to be NP-complete [2]. The independent dominating set search problem consists in finding such a set.</p> <p>Finding an independent dominating set of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] \\[\\sum_{v \\in N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\]"},{"location":"problems/domset/#minimum-independent-dominating-set-problem-and-independent-domination-number","title":"Minimum independent dominating set problem and independent domination number","text":"<p>The minimum independent dominating set problem consists in finding a minimum independent dominating set in the graph; it is  NP-hard.</p> <p>Finding a minimum independent dominating set is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\min_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t. } x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] \\[\\sum_{v \\in N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\] <p>Computing the independent domination number of a graph is also NP-hard. It also follows immediatly from the definition that:</p> \\[\\gamma(G) \\leq i(G) \\leq \\alpha(G)\\]"},{"location":"problems/domset/#total-dominating-set-search-and-decision-problem","title":"Total dominating set search and decision problem","text":"<p>The total dominating set decision problem consists in deciding whether a connected graph, given a natural integer \\(k\\), has a total dominating set of size \\(k\\). This problem has been proven to be NP-complete [3]. The total dominating set search problem consists in finding such a set.</p> <p>If \\(k &gt; 1\\), finding a total dominating set of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] \\[\\sum_{v \\in N(u)} x_v \\geq 1 \\ \\forall u \\in V\\]"},{"location":"problems/domset/#minimum-total-dominating-set-problem-and-total-domination-number","title":"Minimum total dominating set problem and total domination number","text":"<p>The minimum total dominating set problem consists in finding a minimum total dominating set in the graph; it is  NP-hard.</p> <p>If no vertex is connected to all the others (polynomially checkable and in the opposite case the solution is the vertex in question), finding a minimum total dominating set is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\min_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t. } x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] \\[\\sum_{v \\in N(u)} x_v \\geq 1 \\ \\forall u \\in V\\] <p>Computing the total domination number of a graph is also NP-hard. It also follows immediatly from the deinition that:</p> \\[\\gamma(G) \\leq \\gamma_t(G)\\]"},{"location":"problems/domset/#connected-dominating-set-search-and-decision-problem","title":"Connected dominating set search and decision problem","text":"<p>The connected dominating set decision problem consists in deciding whether a connected graph, given a natural integer \\(k\\), has a connected dominating set of size \\(k\\). This problem has been proven to be NP-complete [4]. The connected dominating set search problem consists in finding such a set.</p> <p>Finding a connected dominating set of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program [5]:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[\\sum_{v \\in N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\] \\[\\sum_{(u, v) \\in E} y_{uv} = \\sum_{u \\in V} - 1 \\] \\[y_{uv} \\leq x_u,\\  y_{uv} \\leq x_v, \\ \\forall(u, v) \\in E \\] \\[z^w_{uv} \\leq y_{uv},\\ z^w_{uv} \\leq x_w,\\ \\forall(u, v) \\in E, w \\in V\\] \\[z^w_{vu} \\leq y_{uv},\\ z^w_{vu} \\leq x_w,\\ \\forall(u, v) \\in E, w \\in V\\] \\[y_{uv} + x_u + x_v + x_w - 3 \\leq z^w_{uv} + z^w_{vu} \\leq 3 + y_{uv} \u2212 x_u \u2212 x_v \u2212 x_w, \\forall u, v, w \\in V\\] \\[ x_u + x_v - 1 \\leq \\sum_{ w' \\in V \\setminus \\{i, j\\}} z^v_{uw'} + y_{uv} \\leq 3 \u2212 x_u \u2212 x_v,\\ \\forall u, v \\in V \\]"},{"location":"problems/domset/#minimum-connected-dominating-set-problem-and-connected-domination-number","title":"Minimum connected dominating set problem and connected domination number","text":"<p>The minimum connected dominating set problem consists in finding a minimum connected dominating set in the graph; it is  NP-hard.</p> <p>Finding a minimum total dominating set is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\min_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t.} \\sum_{v \\in N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\] \\[\\sum_{(u, v) \\in E} y_{uv} = \\sum_{u \\in V} - 1 \\] \\[y_{uv} \\leq x_u,\\  y_{uv} \\leq x_v, \\ \\forall(u, v) \\in E \\] \\[z^w_{uv} \\leq y_{uv},\\ z^w_{uv} \\leq x_w,\\ \\forall(u, v) \\in E, w \\in V\\] \\[z^w_{vu} \\leq y_{uv},\\ z^w_{vu} \\leq x_w,\\ \\forall(u, v) \\in E, w \\in V\\] \\[y_{uv} + x_u + x_v + x_w - 3 \\leq z^w_{uv} + z^w_{vu} \\leq 3 + y_{uv} \u2212 x_u \u2212 x_v \u2212 x_w, \\forall u, v, w \\in V\\] \\[ x_u + x_v - 1 \\leq \\sum_{ w' \\in V \\setminus \\{i, j\\}} z^v_{uw'} + y_{uv} \\leq 3 \u2212 x_u \u2212 x_v,\\ \\forall u, v \\in V \\] <p>Computing the connected domination number of a graph is also NP-hard. It also follows immediatly from the deinition that:</p> \\[\\gamma(G) \\leq \\gamma_c(G)\\]"},{"location":"problems/domset/#domatic-partition-search-and-decision-problem","title":"Domatic partition search and decision problem","text":"<p>The domatic partition decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has a domatic partition of size \\(k\\). This problem has been proven to be NP-complete [2]. The domatic partition search problem consists in finding such a partition.</p> <p>Finding a domatic partition of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> <p>Each vertex belongs to one set:</p> \\[\\sum_{i = 1}^k x_{v, i} = 1 \\  \\forall v \\in V\\] <p>Each set is is a dominating set:</p> \\[\\sum_{v \\in N(u) \\cup \\{u\\}} x_{v, i} \\geq 1 \\ \\forall u \\in V, \\, i = 1, ..., k\\]"},{"location":"problems/domset/#domatic-partition-problem-and-domatic-number","title":"Domatic partition problem and domatic number","text":"<p>The domatic partition problem consists in finding a maximum dominating partition in the graph; it is  NP-hard.</p> <p>Finding a maximum dominating set is equivalent to find an optimal solution to the following 0-1 integer linear program (where \\(w_i\\) represents whether the partition is empty or not):</p> \\[ \\max_{x, w} \\sum_{i = 1}^{|V|}w_i\\] \\[\\text{s.t. } \\sum_{i = 1}^{|V|} x_{v, i} = 1 \\  \\forall v \\in V\\] \\[\\sum_{v \\in N(u) \\cup \\{u\\}} x_{v, i} \\geq 1 \\ \\forall u \\in V, \\, i = 1, ..., |V|\\] \\[ x_{u, i} \\leq w_i \\ \\forall u \\in V, \\, i = 1, ..., |V|\\] <p>Computing the domatic number of a graph is also NP-hard. However it has been proved that:</p> \\[d(G) \\leq \\delta(G) + 1\\] <p>where \\(\\delta(G)\\) is the minimum degree of a vertex of \\(G\\) [6].</p> <p>[1] Hedetniemi, S. T.; Laskar, R. C. (1990), \"Bibliography on domination in graphs and some basic definitions of domination parameters\", Discrete Mathematics, 86 (1\u20133): 257\u2013277.</p> <p>[2] M.R. Garey and M.R. Johnson. Computers and Intractability. Freeman, New York, 1979.</p> <p>[3] Michael A. Henning, Anders Yeo. Total Domination in Graphs. Springer, 2013.</p> <p>[4] Oliver Schaudt, Rainer Schrader, The complexity of connected dominating sets and total dominating sets with specified induced subgraphs, Information Processing Letters, Volume 112, Issue 24, 2012.</p> <p>[5] Fan, Neng &amp; Watson, Jean-Paul. (2012). Solving the Connected Dominating Set Problem and Power Dominating Set Problem by Integer Programming.</p> <p>[6] E.J. Cockayne and S.T. Hedetniemi, Towards a theory of domination in graphs, Networks 7 (1977) 247-261.</p>"},{"location":"problems/grid-games/","title":"Grid Games","text":""},{"location":"problems/grid-games/#latin-square-completion","title":"Latin square completion","text":"<p>The latin square is a game where the player needs to fill a \\(n \\times n\\) grid with integers between 1 and \\(n\\), each occuring exactly once in each row and each column. Determining whether a latin square has a solution, given a list of cells already filled, is NP-complete [1].</p>"},{"location":"problems/grid-games/#generalised-sudoku-completion","title":"Generalised Sudoku completion","text":"<p>Sudoku is a game where the player needs to fill a \\(9 \\times 9\\) grid with integers between 1 and \\(9\\), each occuring exactly once in each row and each column. Furthermore, th grid is divided in 9 \\(3 \\times 3\\) square yielding the additional constraint that all the number inside a square must be distinct. Generalised Sudoku is  the same game with a grid of \\(k^2 \\times k^2\\), numbers going from 1 to \\(k^2\\) and \\(k^2\\) squares of size \\(k \\times k\\) instead. Determining whether a generalised Sudoku grid has a solution, given a list of cells already filled, is NP-complete [2].</p> <p>[1] Charles J. Colbourn, The complexity of completing partial Latin squares, Discrete Applied Mathematics, Volume 8, Issue 1, 1984, Pages 25-30.</p> <p>[2] Complexity and completeness of finding another solution and its application to puzzles T. Yato and T. Seta, IEICE Trans. Fundam. Electron., E86-A (5) (2003), pp. 1052-1060.</p>"},{"location":"problems/hamiltonian/","title":"Hamiltonian graphs","text":"<p>Given a directed graph \\(G = (V, E)\\), a Hamiltonian path is a path that visits each vertex exactly once. A Hamiltonian cycle (or Hamiltonian circuit) is a Hamiltonian path that is a cycle.</p>"},{"location":"problems/hamiltonian/#hamiltonian-cycle-search-and-decision-problem","title":"Hamiltonian cycle search and decision problem","text":"<p>The Hamiltonian cycle decision problem consists in deciding whether a Hamiltonian path exists in the graph. It can either be a directed or undirected cycle. Both problems has been proven to be NP-complete (Karp, 1972) [1]. The search version of the problem consists in finding such a cycle.</p> <p>The Hamiltonian cycle problem is a special case of the traveling salesperson decision problem where all the weights are equal to 1 and the cost \\(|V|\\).</p>"},{"location":"problems/hamiltonian/#hamiltonian-path-search-and-decision-problem","title":"Hamiltonian path search and decision problem","text":"<p>The Hamiltonian path decision problem consists in deciding whether a Hamiltonian path exists in the graph. It can either be a directed or undirected path. Both problems has been proven to be NP-complete [2]. The search version of the problem consists in finding such a path.</p> <p>Finding a Hamiltonian path is equivalent to connect a new vertex to all the vertices in the graph and search for a Hamiltonian cycle in this new graph.</p>"},{"location":"problems/hamiltonian/#hamiltonian-path-with-fixed-start-and-end-points-search-and-decision-problem","title":"Hamiltonian path with fixed start and end points search and decision problem","text":"<p>The Hamiltonian path with fixed start and end decision problem consists in deciding, given two vertices \\(v_s, v_e \\in V\\),whether a Hamiltonian path whose start is \\(v_s\\) and end \\(v_e\\) exists in the graph. It can either be a directed or undirected path. Both problems has been proven to be NP-complete [2]. The search version of the problem consists in finding such a path.</p> <p>Finding a Hamiltonian path is equivalent to connect a new vertex \\(v'\\) to all the vertices in the graph and finding a feasible solution for the following 0-1 linear integer programming program:</p> <p>For a directed path:</p> \\[ \\sum_{e \\in \\delta^+(u)} x_e = 1 \\ \\forall u \\in V \\cup \\{v'\\}\\] \\[ \\sum_{e \\in \\delta^-(u)} x_e = 1 \\ \\forall u \\in V \\cup \\{v'\\}\\] \\[ x_{(v', v_s)} = 1 \\] \\[ x_{(v_e, v')} = 1 \\] <p>For an undirected path:</p> \\[ \\sum_{e \\in \\delta(u)} x_e = 2 \\ \\forall u \\in V \\cup \\{v'\\}\\] \\[ x_{(v', v_s)} = 1 \\] \\[ x_{(v_e, v')} = 1 \\]"},{"location":"problems/hamiltonian/#traveling-salesperson-problem-search-decision-problem","title":"Traveling salesperson problem search decision problem","text":"<p>The traveling salesperson problem consists in deciding whether, given a cost \\(C\\), a Hamiltonian cycle with weigth smaller or equal than \\(C\\) exists in the graph. It can either be a directed or undirected cycle. Both problems are NP-complete (Proof 1).</p> <p>If the graph is connected and \\(\\textbf{|V| &gt; 2}\\) (if it is not the case there is no such cycle), finding a Hamiltonian cycle is equivalent to find a feasible solution to this 0-1 integer linear program:</p> <p>For a directed cycle:</p> \\[ \\sum_{e \\in \\delta^+(u)} x_e = 1 \\ \\forall u \\in V \\] \\[ \\sum_{e \\in \\delta^-(u)} x_e = 1 \\ \\forall u \\in V \\] \\[ \\sum_{e \\in E} w_e x_e \\leq C\\] <p>For an undirected cycle:</p> \\[ \\sum_{e \\in \\delta(u)} x_e = 2 \\ \\forall u \\in V \\] \\[ \\sum_{e \\in E} w_e x_e \\leq C\\] <p>Proof 1</p> <p>TSP is NP-hard since it is a generalization of the Hamiltonian cycle problem. However, it remains in NP as either the graph is not connected (polynomially checkable) and the problem has no solution, or the graph is connected in which case the problem is reducible to a 0-1 linear integer program.</p> <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p> <p>[2] M.R. Garey and M.R. Johnson. Computers and Intractability. Freeman, New York, 1979.</p>"},{"location":"problems/indset/","title":"Independent set","text":"<p>A subset of vertices \\(S\\) in a graph \\(G = (V, E)\\) is an independent set if for every pair of vertices of \\(S\\), there is no edge connecting the two.</p> <p>A maximum independent set is an independent set of largest possible size. This size is called the independence number of \\(G\\) and is usually denoted by \\(\\alpha(G)\\).</p> <p>An indepedent dominating set is a subset of vertices that is both an independent set and a dominating set.</p> <p>A minimum independent dominating set is an independent dominating set of smallest possible size. This size is called the independent domination number of \\(G\\) and is usually denoted by \\(i(G)\\).</p> <p>A partition of \\(V\\) into independent subsets is called a coloring.</p>"},{"location":"problems/indset/#independent-set-search-and-decision-problem","title":"Independent set search and decision problem","text":"<p>The independent set decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has an independent set of size \\(k\\). This problem has been proven to be NP-complete (Karp, 1972) [1]. The independent search problem consists in finding such a set.</p> <p>Finding an independent set of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] <p>Finding an independent set of size \\(k\\) is equivalent to finding a clique of size \\(k\\) in the graph's complement. It is also equivalent to finding a vertex cover of size \\(|V| - k\\) since its complement is going to be an independent set.</p>"},{"location":"problems/indset/#maximum-independent-set-problem-and-independence-number","title":"Maximum independent set problem and independence number","text":"<p>The maximum independent set problem consists in finding a maximum independent set in the graph; it is  NP-hard.</p> <p>Finding a maximum independent set is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\max_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t.} x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] <p>Finding a maximum independent set is equivalent to finding a maximum clique in the graph's complement. It is also equivalent to finding a minimum vertex cover and take its complement.</p> <p>Computing the independence number of a graph is also NP-hard. It is equal to the number of vertices minus the vertex cover number of the graph (Gallai 1959) [2] and to the clique number of the graph's complement.</p>"},{"location":"problems/indset/#independent-dominating-set-search-and-decision-problem","title":"Independent dominating set search and decision problem","text":"<p>The independent dominating set decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has an independent dominating set of size \\(k\\). This problem has been proven to be NP-complete [3]. The independent dominating set search problem consists in finding such a set.</p> <p>Finding an independent dominating set of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] \\[\\sum_{v \\in \\N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\]"},{"location":"problems/indset/#minimum-independent-dominating-set-problem-and-independent-domination-number","title":"Minimum independent dominating set problem and independent domination number","text":"<p>The minimum independent dominating set problem consists in finding a minimum independent dominating set in the graph; it is  NP-hard.</p> <p>Finding a minimum independent dominating set is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\min_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t. } x_u + x_{v} \\leq 1 \\ \\forall (u, v) \\in E\\] \\[\\sum_{v \\in \\N(u) \\cup \\{u\\}} x_v \\geq 1 \\ \\forall u \\in V\\] <p>Computing the independent domination number of a graph is also NP-hard. It also follows immediatly from the definition that:</p> \\[\\gamma(G) \\leq i(G) \\leq \\alpha(G)\\] <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p> <p>[2] T. Gallai, \u00dcber extreme Punkt-und Kantenmengen. Ann. Univ. Sci. Budapest, E\u00f6tv\u00f6s Sect. Math. 2 (1959) 133-138</p> <p>[3] M.R. Garey and M.R. Johnson. Computers and Intractability. Freeman, New York, 1979.</p>"},{"location":"problems/n-queens/","title":"N-Queens Puzzle","text":"<p>The n-queens puzzle consists in placing \\(n\\) queens on a \\(n \\times n\\) chess board, such that no two queens are on the same row, column or diagonal. Although the decision and the search problem are decidable in polynomial time, some of its variants are known to be NP-complete.</p>"},{"location":"problems/n-queens/#n-queens-completion-problem","title":"N-Queens completion problem","text":"<p>The n-queens completion decision problem consists in, given a set \\(Q\\) of queens already placed on the board, deciding whether the assignment can be completed. This problem has been proven to be NP-complete [1]. The search version of the problem consists in finding such a (partial) assignment.</p> <p>Finding a solution for the n-queens completion problem is equivalent to find a feasible solution to this 0-1 integer linear program:</p> <p>N queens must be placed on the board:</p> \\[ \\sum_{i = 0}^{n-1}\\sum_{j = 0}^{n-1} x_{ij} = n\\] <p>There is at most one queen on each row and column:</p> \\[ \\sum_{i = 0}^{n-1} x_{ij} \\leq 1 \\ \\forall j = 0, ..., n-1\\] \\[ \\sum_{j = 0}^{n - 1} x_{ij} \\leq 1 \\ \\forall i = 0, ..., n-1\\] <p>There is at most one queen on each diagonal:</p> \\[ \\sum_{i = 0}^n 1_{0 \\leq j - i &lt; n} x_{(n-1-i)(j-i)} \\leq \\ \\forall j = 0, ..., 2n - 2\\] \\[ \\sum_{j = 0}^n 1_{0 \\leq i - j &lt; n} x_{j(i - j)} \\leq \\ \\forall i = 0, ..., 2n - 2\\] <p>The queens in \\(Q\\) must be placed:</p> \\[ x_{ij} = 1 \\  \\forall (i, j) \\in Q\\]"},{"location":"problems/n-queens/#blocked-n-queens-problem","title":"Blocked n-Queens Problem","text":"<p>The blocked n-queens decision problem consists in, given a set \\(X\\) of cells where the queens cannot be placed, deciding whether the \\(n\\) queens can be placed on the board. This problem has been proven to be NP-complete [1]. The search version of the problem consists in finding such an assignment.</p> <p>Finding a solution for the blocked n-queens problem is equivalent to find a feasible solution to this 0-1 integer linear program:</p> <p>N queens must be placed on the board:</p> \\[ \\sum_{i = 0}^{n-1}\\sum_{j = 0}^{n-1} x_{ij} = n\\] <p>There is at most one queen on each row and column:</p> \\[ \\sum_{i = 0}^{n-1} x_{ij} \\leq 1 \\ \\forall j = 0, ..., n-1\\] \\[ \\sum_{j = 0}^{n - 1} x_{ij} \\leq 1 \\ \\forall i = 0, ..., n-1\\] <p>There is at most one queen on each diagonal:</p> \\[ \\sum_{i = 0}^n 1_{0 \\leq j - i &lt; n} x_{(n-1-i)(j-i)} \\leq \\ \\forall j = 0, ..., 2n - 2\\] \\[ \\sum_{j = 0}^n 1_{0 \\leq i - j &lt; n} x_{j(i - j)} \\leq \\ \\forall i = 0, ..., 2n - 2\\] <p>The cells in \\(X\\) cannot be occupied:</p> \\[ x_{ij} = 0 \\  \\forall (i, j) \\in X\\] <p>[1] Ian P. Gent, Christopher Jefferson, and Peter Nightingale Complexity of n-Queens Completion JAIR, 2017 </p>"},{"location":"problems/partitioning/","title":"Partitioning problems","text":"<p>Partitioning problems arises in many flavours, but they all consists in determining whether it is possible to partition a multiset of \\(n\\) nonnegative integers \\(S\\) according to some constraints.</p>"},{"location":"problems/partitioning/#partition-problem","title":"Partition problem","text":"<p>The partition decision problem consists in deciding whether \\(S\\) can be partitioned in two subsets of equal sum. This problem has been proven to be NP-complete [1] The analogous search problem consists in outputing such a partition.</p> <p>This problem is a special case of the subset sum problem with \\(B = \\dfrac{\\sum_{i = 1}^n S_i}{2}\\) and the k-way partitioning problem with \\(k = 2\\)</p>"},{"location":"problems/partitioning/#k-partitioning-problem","title":"k-partitioning problem","text":"<p>The 3-partition decision problem consists in determining whether \\(S\\) can be partitioned into triplets that all have the same sum. The 4-partition decision problem is analoguous except that we partition \\(S\\) in 4-tuples instead. These two problems have been proven to be strongly NP-complete [2] The corresponding search problems consist in outputing such a partition.</p> <p>Both problem can be generalized to the problem of dividing \\(S\\) into k-tuples of equal sums (strongly NP-hard) [3]. If \\(n = 0 [k]\\), finding a partition of the set is equivalent to find a feasible solution to the following 0-1 linear integer program (where \\(x_{ip} = 1\\) means that the item \\(i\\) belongs to the \\(p\\)-th k-tuple):</p> \\[ \\sum_{p = 1}^{\\frac{n}{k}} x_{ip} = 1, \\ i = 1, ..., n\\] \\[ \\sum_{i = 1}^n S_ix_{ip} = \\dfrac{k}{n}\\sum_{i = 1}^n S_i\\] \\[ \\sum_{i = 1}^n x_{ip} = k ,\\ p = 1, ..., \\dfrac{n}{k}\\] <p>The k-partition </p>"},{"location":"problems/partitioning/#subset-sum-problem","title":"Subset sum problem","text":"<p>The subset sum decision problem consists in deciding whether, given a nonnegative integer \\(B\\), there is a subset of \\(S\\) whose elements add up to \\(B\\). This problem has been proven to be NP-complete [1]. The corresponding search problem consists in finding such a subset.</p> <p>Finding a subset that fulfills this condition is equivalent to find a feasible solution to the following 0-1 linear integer program:</p> \\[ \\sum_{i = 1}^n S_ix_{i} = B\\]"},{"location":"problems/partitioning/#k-way-number-partitioning","title":"k-way number partitioning","text":"<p>The k-way number partitioning decision problem consists in deciding whether, given a positive integer \\(k\\), \\(S\\) can be divided in \\(k\\) subsets that all have the same sum. This problem has been proven to be NP-complete [2]. The corresponding search problem consists in finding such a partition.</p> <p>Finding a partition that fulfills this condition is equivalent to find a feasible solution to the following 0-1 linear integer program(where \\(x_{ip} = 1\\) means that the item \\(i\\) belongs to the \\(p\\)-th subset):</p> \\[ \\sum_{p = 1}^{k} x_{ip} = 1, \\ i = 1, ..., n\\] \\[ \\sum_{i = 1}^n S_ix_{ip} = \\dfrac{\\sum_{i = 1}^n S_i}{k}\\]"},{"location":"problems/partitioning/#bin-packing-decision-and-search-problem","title":"Bin packing decision and search problem","text":"<p>The bin packing decision problem consists in deciding whether, given positive integers \\(k\\) and \\(B\\), \\(S\\) can be partitioned into \\(k\\) subsets such that the sum of each subset is smaller or equal than \\(B\\). This problem has been proven to be strongly NP-complete [2]. The corresponding search problem consists in finding such a partition.</p> <p>Finding a bin packing is equivalent to find a feasible solution to the following integer linear program (where \\(x_{ib} = 1\\) means that the item \\(i\\) belongs to the \\(b\\)-th bin):</p> \\[ \\sum_{b = 1}^{k} x_{ib} = 1, \\ i = 1, ..., n\\] \\[ \\sum_{i = 1}^n S_i x_{ib} \\leq B, \\ b = 1, ..., k\\]"},{"location":"problems/partitioning/#bin-packing-problem","title":"Bin packing problem","text":"<p>The bin packing problem consists in finding, given a positive integer \\(B\\), the smallest partition of \\(S\\) such that the sum of each subset is smaller or equal than \\(B\\). This problem is NP-hard.</p> <p>Finding a bin packing is equivalent to solve the following integer linear program (where \\(x_{ib} = 1\\) means that the item \\(i\\) belongs to the \\(b\\)-th bin):</p> \\[\\min_y \\sum_{b=1}^{n} y_{b}\\] \\[\\text{s.t. } \\sum_{b = 1}^{k} x_{ib} = 1, \\ i = 1, ..., n\\] \\[ \\sum _{i = 1}^{n} S_i x_{ib} \\leq B y_{b}, \\ \\forall b = 1, ..., n\\]"},{"location":"problems/partitioning/#bin-packing-decision-and-search-problem_1","title":"Bin packing decision and search problem","text":"<p>The bin packing decision problem consists in deciding whether, given positive integers \\(k\\) and \\(B\\), \\(S\\) can be partitioned into \\(k\\) subsets such that the sum of each subset is smaller or equal than \\(B\\). This problem has been proven to be strongly NP-complete [2]. The corresponding search problem consists in finding such a partition.</p> <p>Finding a bin packing is equivalent to find a feasible solution to the following integer linear program (where \\(x_{ib} = 1\\) means that the item \\(i\\) belongs to the \\(b\\)-th bin):</p> \\[ \\sum_{b = 1}^{k} x_{ib} = 1, \\ i = 1, ..., n\\] \\[ \\sum_{i = 1}^n S_i x_{ib} \\leq B, \\ b = 1, ..., k\\]"},{"location":"problems/partitioning/#bin-covering-problem","title":"Bin covering problem","text":"<p>The bin covering problem consists in finding, given a positive integer \\(B\\), the smallest partition of \\(S\\) such that the sum of each subset is smaller or equal than \\(B\\). This problem is NP-hard.</p> <p>Finding a bin packing is equivalent to solve the following integer linear program (where \\(x_{ib} = 1\\) means that the item \\(i\\) belongs to the \\(b\\)-th bin):</p> \\[\\min_y \\sum_{b=1}^{n} y_{b}\\] \\[\\text{s.t. } \\sum_{b = 1}^{k} x_{ib} = 1, \\ i = 1, ..., n\\] \\[ \\sum _{i = 1}^{n} S_i x_{ib} \\leq B y_{b}, \\ \\forall b = 1, ..., n\\] <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p> <p>[2]  M.R. Garey and M.R. Johnson. Computers and Intractability. Freeman, New York, 1979.</p> <p>[3] Babel, L., Kellerer, H. &amp; Kotov, V. The k-partitioning problem. Mathematical Methods of Operations Research 47, 59\u201382 (1998).</p> <p>[4] Martello S., Toth P., KNAPSACK PROBLEMS Algorithms and Computer Implementations, 1990.</p>"},{"location":"problems/set-cover/","title":"Set Cover and Packing","text":"<p>Let \\(\\mathcal{U}\\) be a universe and \\(\\mathcal{S}\\) a collection of subsets of \\(\\mathcal{U}\\). A cover is a subcollection \\(\\mathcal{C} \\subseteq \\mathcal{S}\\) such that every element of \\(\\mathcal{U}\\) appears at least once in \\(\\mathcal{C}\\). On the other hand, a packing is a subcollection \\(\\mathcal{C} \\subseteq \\mathcal{S}\\) such that all sets in \\(\\mathcal{C}\\) are pairwise disjoint. If \\(\\mathcal{C}\\) is both a cover and a packing then it is an exact cover of \\(\\mathcal{U}\\).</p> <p>A maximum packing is the largest packing one can find for \\(\\mathcal{U}\\) while a minimum cover is the smallest cover one can find for \\(\\mathcal{U}\\).</p> <p>A hitting set is a subset \\(\\mathcal{U}^* \\subseteq \\mathcal{U}\\) such that each subset in \\(\\mathcal{S}\\) contains at least one element of \\(\\mathcal{U}^*\\). An exact hitting set is a hitting set such that each subset in \\(\\mathcal{S}\\) contains exactly one element of \\(\\mathcal{U}^*\\).</p> <p>A minimum hitting set is the smallest hitting set one can find for \\(\\mathcal{U}\\).</p>"},{"location":"problems/set-cover/#set-cover-decision-and-search-problem","title":"Set cover decision and search problem","text":"<p>The set cover decision problem consists in deciding whether, given a natural integer \\(k\\), there exists a cover \\(\\mathcal{C}\\) of \\(\\mathcal{U}\\) such that \\(|\\mathcal{C}| \\leq k\\). This problem has been proven to be NP-complete (Karp, 1972) [1]. The corresponding search problem consists in outputing such a cover.</p> <p>Finding a set cover of \\(k\\) elements is equivalent to find a feasible solution to the following 0-1 integer linear program:</p> \\[\\sum_{s \\in \\mathcal{S}} x_s \\leq k\\] \\[\\sum_{s:e \\in s} x_s \\geq 1 \\  \\forall e \\in \\mathcal{U} \\]"},{"location":"problems/set-cover/#minimum-set-cover-problem","title":"Minimum set cover problem","text":"<p>The minimum set cover problem consists in finding a minimum set cover of \\(\\mathcal{U}\\); it is NP-hard.</p> <p>The 0-1 integer linear programming formulation of the problem is the following [2]:</p> \\[\\min_x \\sum_{s \\in \\mathcal{S}} x_s \\] \\[\\text{s.t. } \\sum_{s:e \\in s} x_s \\geq 1 \\  \\forall e \\in \\mathcal{U} \\]"},{"location":"problems/set-cover/#set-packing-decision-and-search-problem","title":"Set packing decision and search problem","text":"<p>The set packing decision problem consists in deciding whether, given a natural integer \\(k\\), there exists a packing \\(\\mathcal{C}\\) of \\(\\mathcal{U}\\) such that \\(|\\mathcal{C}| = k\\). This problem has been proven to be NP-complete (Karp, 1972) [1]. The corresponding search problem consists in outputing such a packing.</p> <p>Finding a set packing of \\(k\\) elements is equivalent to finding a feasible solution to the following 0-1 integer linear program:</p> \\[\\sum_{s \\in \\mathcal{S}} x_s \\geq k\\] \\[\\sum_{s:e \\in s} x_s \\leq 1 \\  \\forall e \\in \\mathcal{U} \\] <p>Finding a solution for the problem is also equivalent to find an independent set of size \\(k\\) in the following graph: for each element of \\(\\mathcal{S}\\) create a vertex, and add an edge between two vertices if the intersection of their corresponding sets is non empty (Proof 1).</p> Proof 1 <ul> <li> If there exists an independent set \\(I\\) of size \\(k\\) in the graph then any pair of vertices in \\(I\\) is not connected which implies that their respective sets are disjoints.</li> <li> If there is no such set then for any subcollection of \\(k\\) elements of \\(\\mathcal{S}\\), at least one pair of set is not disjoint.</li> </ul>"},{"location":"problems/set-cover/#maximum-set-packing-problem","title":"Maximum set packing problem","text":"<p>The maximum set packing problem consists in finding a maximum set packing of \\(\\mathcal{U}\\); it is NP-hard.</p> <p>The 0-1 integer linear programming formulation of the problem is the following [2]:</p> \\[\\max_x \\sum_{s \\in \\mathcal{S}} x_s \\] \\[\\text{s.t. } \\sum_{s:e \\in s} x_s \\leq 1 \\  \\forall e \\in \\mathcal{U} \\] <p>Solving the problem is also equivalent to find  a maximum independent set in the above construction.</p>"},{"location":"problems/set-cover/#exact-cover-problem","title":"Exact cover problem","text":"<p>The exact set cover decision problem consists in deciding whether \\(U\\) admits an exact cover. This problem has been proven to be NP-complete (Karp, 1972) [1]. The corresponding search problem consists in outputing such a cover.</p> <p>Finding an exact cover is equivalent to finding a feasible solution to the following 0-1 integer linear program:</p> \\[\\sum_{s:e \\in s} x_s = 1 \\  \\forall e \\in \\mathcal{U} \\]"},{"location":"problems/set-cover/#hitting-set-decision-and-search-problem","title":"Hitting set decision and search problem","text":"<p>The hitting set decision problem consists in deciding whether, given a natural integer \\(k\\), there exists a hitting set \\(\\mathcal{U}^*\\) such that \\(|\\mathcal{U}| \\leq k\\). This problem has been proven to be NP-complete (Karp, 1972) [1]. The corresponding search problem consists in outputing such a set.</p> <p>Finding a hitting set of \\(k\\) elements is equivalent to find a feasible solution to the following 0-1 integer linear program:</p> \\[\\sum_{u \\in \\mathcal{U}} x_u \\leq k\\] \\[\\sum_{u \\in s} x_u \\geq 1 \\  \\forall s \\in \\mathcal{S} \\]"},{"location":"problems/set-cover/#minimum-hitting-set-problem","title":"Minimum hitting set problem","text":"<p>The minimum hitting set problem consists in finding a minimum hitting set of \\(\\mathcal{U}\\); it is NP-hard.</p> <p>The 0-1 integer linear programming formulation of the problem is the following:</p> \\[\\min_x \\sum_{u \\in \\mathcal{U}} x_u \\] \\[\\sum_{u \\in s} x_u \\geq 1 \\  \\forall s \\in \\mathcal{S} \\]"},{"location":"problems/set-cover/#exact-hitting-set-problem","title":"Exact hitting set problem","text":"<p>The exact hitting set decision problem consists in deciding whether \\(U\\) admits an exact hitting set. This problem is also NP-complete (Proof 2). The corresponding search problem consists in outputing such a cover.</p> <p>Finding an exact hitting set is equivalent to finding a feasible solution to the following 0-1 integer linear program:</p> \\[\\sum_{u \\in s} x_u = 1 \\  \\forall s \\in \\mathcal{S} \\] Proof 2   The exact hitting set problem is trivially in NP as we can linearly iterate over \\(\\mathcal{S}\\) to verify a solution.    To prove that it is NP-hard, we will build a reduction from the [exact set cover problem](#exact-cover-problem):    Let \\(\\langle \\mathcal{U}, \\mathcal{S} \\rangle\\) be an instance of exact set cover. Let \\[\\mathcal{S}'= \\{\\{s: u \\in s\\ |\\ s \\in S\\} \\ |\\  u\\in \\mathcal{U}\\}\\]    That is, for each element in the universe build a set containing all the subsets of \\(\\mathcal{S}\\) that contain it.   <ul> <li> Define the following function on the input: \\[f(\\langle \\mathcal{U}, \\mathcal{S} \\rangle) = \\langle \\mathcal{S}, \\mathcal{S}'\\rangle\\] </li> <li> If \\( \\langle \\mathcal{S}, \\mathcal{S}'\\rangle \\in \\textup{EXACTHITTINGSET} \\), then there exists a subset  \\( \\mathcal{S}^* \\) such that each subset in \\(\\mathcal{S}'\\) contains exactly one element of \\(\\mathcal{S}^* \\). This means by definition of \\(\\mathcal{S}'\\), that for every \\(u \\in \\mathcal{U}\\) there is exactly one set  \\(s \\in \\mathcal{S}^* \\) such that \\(u \\in s\\). This implies that \\(\\mathcal{S}^* \\) is an exact set cover of $\\mathcal{U}$ and therefore, that \\( \\langle \\mathcal{U}, \\mathcal{S}\\rangle \\in \\textup{EXACTCOVER}\\). </li> <li> If    \\(\\langle \\mathcal{U}, \\mathcal{S}\\rangle \\in \\textup{EXACTCOVER} \\), then there exists a subscollection \\( \\mathcal{C} \\subseteq \\mathcal{S} \\) such that every \\( u \\in \\mathcal{U} \\) is contained in exactly one element of \\(\\mathcal{C}\\). This means that each element of \\(\\mathcal{S}'\\) contains exactly one element of \\(\\mathcal{C}\\). Therefore, \\(\\mathcal{C}\\) is an exact hitting set and \\(\\langle \\mathcal{S}, \\mathcal{S}'\\rangle \\in \\textup{EXACTHITTINGSET}\\). </li> </ul>"},{"location":"problems/set-cover/#set-splitting","title":"Set Splitting","text":"<p>The set splitting decision problem consists in determining whether there exists a partition \\((\\mathcal{U}_1, \\mathcal{U}_2)\\) of \\(\\mathcal{U}\\) such that all subsets in \\(\\mathcal{S}\\) are neither entirely contained in \\(\\mathcal{U}_1\\) nor in  \\(\\mathcal{U}_2\\). This problem has been proven to be NP-complete since it is equivalent to hypergraph 2-coloring [3]. The corresponding search problem consists in outputing such a partition.</p> <p>Finding a set splitting partition is equivalent to finding  the following 0-1 integer linear program:</p> \\[ 0 &lt; \\sum_{u \\in s} x_u &lt; |s| \\: \\forall s \\in \\mathcal{S}\\] <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p> <p>[2] Vazirani, Vijay V. (2001), Approximation Algorithms, Springer-Verlag.</p> <p>[3] Lovasz, L. (1973), \"Coverings and colorings of hypergraph\" Proc. 4th Southeastern Conference on Combinatorics, Graph Theory, and Computing, Utilitas Mathematica Publishing, Winnipeg, 3-12</p>"},{"location":"problems/vertex_cover/","title":"Vertex cover","text":"<p>A subset of vertices \\(S\\) in a graph \\(G = (V, E)\\) is a vertex cover if every edge of the graph has an endpoint in \\(S\\).</p> <p>A minimum vertex cover is a vertex cover of smallest possible size. This size is called the vertex cover number of \\(G\\) and is usually denoted by \\(\\tau(G)\\).</p>"},{"location":"problems/vertex_cover/#vertex-cover-search-decision-problem","title":"Vertex cover search decision problem","text":"<p>The vertex cover decision problem consists in deciding whether a graph, given a natural integer \\(k\\), has a vertex cover of size \\(k\\). This problem has been proven to be NP-complete (Karp, 1972) [1]. The vertex cover search problem consists in finding such a set.</p> <p>Finding a vertex cover of size \\(k\\) is equivalent to find a feasible solution to this 0-1 integer linear program:</p> \\[\\sum_{v \\in V} x_v = k\\] \\[x_u + x_{v} \\geq 1 \\ \\forall (u, v) \\in E\\] <p>Finding an vertex cover of size \\(k\\) is equivalent to finding an independent set of size \\(|V| - k\\) since its complement is going to be a vertex cover.</p>"},{"location":"problems/vertex_cover/#minimum-vertex-cover-problem-and-vertex-cover-number","title":"Minimum vertex cover problem and vertex cover number","text":"<p>The minimum vertex cover problem consists in finding a minimum vertex cover in the graph; it is  NP-hard.</p> <p>Finding a minimum vertex cover is equivalent to find an optimal solution to the following 0-1 integer linear program:</p> \\[\\min_x \\sum_{v \\in V} x_v \\] \\[\\text{s.t.} x_u + x_{v} \\geq 1 \\ \\forall (u, v) \\in E\\] <p>Finding a minimum vertex cover is  equivalent to finding a maximum independent set and take its complement.</p> <p>Computing the vertex cover number of a graph is also NP-hard and is equal to the number of vertices minus the independence number of the graph (Gallai 1959) [2]</p> <p>[1] Karp, Richard M., \u201cReducibility Among Combinatorial Problems\u201d. Complexity of Computer Computations, 1972: Plenum Press, 85-103.</p> <p>[2] T. Gallai, \u00dcber extreme Punkt-und Kantenmengen. Ann. Univ. Sci. Budapest, E\u00f6tv\u00f6s Sect. Math. 2 (1959) 133-138</p>"}]}